[{"C:\\Users\\Lukas\\Desktop\\ego\\src\\index.tsx":"1","C:\\Users\\Lukas\\Desktop\\ego\\src\\reportWebVitals.ts":"2","C:\\Users\\Lukas\\Desktop\\ego\\src\\App.tsx":"3","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\DependencyMatrix.ts":"4","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Network.ts":"5","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Node.ts":"6","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Edge.ts":"7","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Zone.ts":"8","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\ZoneStore.ts":"9","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\SettingsStore.ts":"10","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\NetworkStore.ts":"11","C:\\Users\\Lukas\\Desktop\\ego\\src\\Graph.tsx":"12","C:\\Users\\Lukas\\Desktop\\ego\\src\\ZoneItem.tsx":"13","C:\\Users\\Lukas\\Desktop\\ego\\src\\LeftPanel.tsx":"14","C:\\Users\\Lukas\\Desktop\\ego\\src\\RightPanel.tsx":"15","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicZones.tsx":"16","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicEdges.tsx":"17","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicNodes.tsx":"18","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesIntersect.tsx":"19","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Vector.ts":"20","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicLayout.tsx":"21","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesMax.tsx":"22","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\graph\\Cytoscape.tsx":"23"},{"size":1126,"mtime":1608676977696,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":2139,"mtime":1610901259095,"results":"27","hashOfConfig":"25"},{"size":6815,"mtime":1608559090784,"results":"28","hashOfConfig":"25"},{"size":1478,"mtime":1610868883419,"results":"29","hashOfConfig":"25"},{"size":2623,"mtime":1610869381994,"results":"30","hashOfConfig":"25"},{"size":1735,"mtime":1610909476084,"results":"31","hashOfConfig":"25"},{"size":14238,"mtime":1610905585186,"results":"32","hashOfConfig":"25"},{"size":7847,"mtime":1610921393252,"results":"33","hashOfConfig":"25"},{"size":1869,"mtime":1610904985741,"results":"34","hashOfConfig":"25"},{"size":656,"mtime":1610873374378,"results":"35","hashOfConfig":"25"},{"size":694,"mtime":1610870336531,"results":"36","hashOfConfig":"25"},{"size":5042,"mtime":1610829527762,"results":"37","hashOfConfig":"25"},{"size":2812,"mtime":1609087601186,"results":"38","hashOfConfig":"25"},{"size":1506,"mtime":1610872999515,"results":"39","hashOfConfig":"25"},{"size":3551,"mtime":1610900061375,"results":"40","hashOfConfig":"25"},{"size":716,"mtime":1610829951847,"results":"41","hashOfConfig":"25"},{"size":1431,"mtime":1610898215488,"results":"42","hashOfConfig":"25"},{"size":449,"mtime":1609020253041,"results":"43","hashOfConfig":"25"},{"size":1577,"mtime":1609099085121,"results":"44","hashOfConfig":"25"},{"size":1179,"mtime":1610870560122,"results":"45","hashOfConfig":"25"},{"size":882,"mtime":1610646238530,"results":"46","hashOfConfig":"25"},{"size":5271,"mtime":1610906854142,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1m8gn3d",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"50"},"C:\\Users\\Lukas\\Desktop\\ego\\src\\index.tsx",[],["106","107"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\reportWebVitals.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\App.tsx",["108"],"import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport Matrix from \"./objects/DependencyMatrix\";\r\nimport { Graph } from \"./Graph\";\r\nimport Node from \"./objects/Node\";\r\nimport Network from \"./objects/Network\";\r\nimport { Context } from \".\";\r\nimport { reaction } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ZoneItem } from \"./ZoneItem\";\r\nimport { Box, ChakraProvider, Divider, Flex, Stack } from \"@chakra-ui/react\";\r\nimport { LeftPanel } from \"./LeftPanel\";\r\nimport { RightPanel } from \"./RightPanel\";\r\n\r\nfunction App() {\r\n  const context = useContext(Context);\r\n\r\n  reaction(\r\n    () => context.network.Network,\r\n    (Network) => {\r\n      console.log(Network);\r\n    }\r\n  );\r\n\r\n  const App = observer(() => {\r\n    return (\r\n      <div className=\"App\">\r\n        {!context.network.Network && (\r\n          <CSVReader\r\n            onFileLoaded={(data, fileInfo) => {\r\n              const network = new Network([], []);\r\n              console.log(fileInfo);\r\n              for (let i = 0; i < data.length; i++) {\r\n                const element = data[i];\r\n                network.addEdge(\r\n                  new Node(element[0]),\r\n                  new Node(element[1]),\r\n                  Number.parseFloat(element[2])\r\n                );\r\n              }\r\n              new Matrix(network).nodesDependency();\r\n              network.Edges.forEach((e) => e.UpdateClasses());\r\n              context.network.Network = network;\r\n            }}\r\n          />\r\n        )}\r\n        {context.network.Network && (\r\n          <div>\r\n            <Stack>\r\n              <Flex>\r\n                <LeftPanel />\r\n                <Divider height={\"100vh\"} orientation=\"vertical\" />\r\n                <Box flex={1}>\r\n                  <Graph />\r\n                </Box>\r\n                <Divider height={\"100vh\"} orientation=\"vertical\" />\r\n                <RightPanel />\r\n              </Flex>\r\n            </Stack>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\DependencyMatrix.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Network.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Node.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Edge.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Zone.ts",["109","110"],"import type Node from \"./Node\";\r\nimport cytoscape, {\r\n  Collection,\r\n  CollectionReturnValue,\r\n  CytoscapeOptions,\r\n  NodeSingular,\r\n} from \"cytoscape\";\r\n\r\nimport { settingsStore, zoneStore } from \"..\";\r\nimport {\r\n  CrossCalc,\r\n  Subtract,\r\n  unitNormal,\r\n  vecFrom,\r\n  vecScale,\r\n  vecScaleTo,\r\n  vecSum,\r\n  vecUnit,\r\n} from \"./Vector\";\r\nimport { cy } from \"./graph/Cytoscape\";\r\nimport { Fade } from \"@chakra-ui/react\";\r\n\r\nexport default class Zone {\r\n  public Ego: Node;\r\n  public innerZoneNodes: Node[];\r\n  public outerZoneNodes: Node[][];\r\n\r\n  private color: string =\r\n    \"#\" +\r\n    Math.floor(Math.random() * 16777215)\r\n      .toString(16)\r\n      .padStart(6, \"0\");\r\n\r\n  private alpha: string = \"80\";\r\n  public isDrawn: boolean = false;\r\n\r\n  private isZoneShown: boolean = true;\r\n  private areShownNodes: boolean = false;\r\n\r\n  private zIndex: number = -1;\r\n\r\n  private automove: any;\r\n\r\n  private layer: any =undefined;\r\n  private canvas: any = undefined;\r\n  private ctx: any =undefined;\r\n\r\n  private insideCollection: Collection = cytoscape().collection();\r\n  private outsideCollection: Collection = cytoscape().collection();\r\n\r\n\r\n  private label: string = \"\";\r\n\r\n  constructor(ego: Node) {\r\n    this.Ego = ego;\r\n\r\n    this.innerZoneNodes = [];\r\n    this.outerZoneNodes = [[], []];\r\n\r\n    this.innerZone(ego);\r\n    this.outerZone(this.innerZoneNodes);\r\n\r\n    this.insideCollection = cy.collection();\r\n    this.outsideCollection = cy.collection();\r\n\r\n\r\n    //   let insideCollectionEdges = cy.collection();\r\n    //   let outsideCollectionEdges = cy.collection();\r\n\r\n    this.innerZoneNodes.forEach((node) => {\r\n      this.insideCollection = this.insideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n      /*        insideCollectionEdges = insideCollectionEdges.union(\r\n          cy.edges(`[source ='${node.Id.toString()}']`)\r\n        );\r\n\r\n        insideCollectionEdges = insideCollectionEdges.union(\r\n          cy.edges(`[target ='${node.Id.toString()}']`)\r\n        );\r\n        */\r\n    });\r\n\r\n    this.outerZoneNodes[0].forEach((node) => {\r\n      this.outsideCollection = this.outsideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n    });\r\n\r\n    this.outerZoneNodes[1].forEach((node) => {\r\n      this.outsideCollection = this.outsideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n    });\r\n\r\n    //     this.drawZone();\r\n  }\r\n\r\n  public set Alpha(alpha: string) {\r\n    this.alpha = alpha.padStart(2, \"0\");\r\n\r\n    if (this.isZoneShown) {\r\n      this.updatePath();\r\n    }\r\n  }\r\n\r\n  public set Zindex(index: number) {\r\n    this.zIndex = index;\r\n    this.clearPath();\r\n    if (this.isZoneShown) {\r\n      this.layer = (cy as any).cyCanvas({ zIndex: this.zIndex });\r\n      this.canvas = this.layer.getCanvas();\r\n      this.ctx = this.canvas.getContext(\"2d\");\r\n      this.drawZone();\r\n    }\r\n  }\r\n\r\n  public get IsDrawn(): boolean {\r\n    return this.isDrawn;\r\n  }\r\n\r\n  public get InsideCollection() {\r\n    return this.insideCollection;\r\n  }\r\n\r\n  public get OutsideCollection() {\r\n    return this.outsideCollection;\r\n  }\r\n\r\n  public get AllCollection() {\r\n    return this.outsideCollection.union(this.insideCollection);\r\n  }\r\n\r\n  public get Label() {\r\n    return this.label;\r\n  }\r\n\r\n  public set Label(label: string) {\r\n    this.label = label;\r\n    this.updatePath();\r\n  }\r\n\r\n  public set EnableAutomove(enable: boolean) {\r\n    if (enable) {\r\n      this.automove.enable();\r\n    } else {\r\n      this.automove.disable();\r\n    }\r\n  }\r\n\r\n  public get AreShownNodes() {\r\n    return this.areShownNodes;\r\n  }\r\n\r\n  public get IsZoneShown() {\r\n    return this.isZoneShown;\r\n  }\r\n\r\n  public set AreShownNodes(show: boolean) {\r\n    this.areShownNodes = show;\r\n  }\r\n\r\n  public set IsZoneShown(show: boolean) {\r\n    this.isZoneShown = show;\r\n\r\n    if (this.isZoneShown) {\r\n      this.drawZone();\r\n    } else {\r\n      this.clearPath();\r\n    }\r\n  }\r\n\r\n  public set Color(color: string) {\r\n    this.color = color;\r\n    this.updatePath();\r\n  }\r\n\r\n  public get Color() {\r\n    return this.color;\r\n  }\r\n\r\n  public get Alpha() {\r\n    return this.alpha;\r\n  }\r\n\r\n  public updatePath() {\r\n    if (this.isDrawn) {\r\n      this.calc(this.insideCollection.union(this.outsideCollection));\r\n    }\r\n  }\r\n\r\n  public applyLayout(layout: string) {\r\n    this.insideCollection\r\n      .union(this.outsideCollection)\r\n      .layout({\r\n        name: layout,\r\n      })\r\n      .start();\r\n  }\r\n\r\n  public clearPath() {\r\n    if (settingsStore.HideOutsideZones) {\r\n      let nodesInZonesExceptZ: Collection = cy.collection();\r\n      zoneStore.Zones.filter((zone) => zone.Ego.Id !== this.Ego.Id).forEach(\r\n        (element) => {\r\n          nodesInZonesExceptZ = nodesInZonesExceptZ.union(\r\n            element.AllCollection\r\n          );\r\n        }\r\n      );\r\n      this.AllCollection.classes();\r\n\r\n      this.AllCollection.difference(nodesInZonesExceptZ).addClass(\"hide\");\r\n    }\r\n    \r\n    if (this.isDrawn) {\r\n      this.isDrawn = false;\r\n      this.layer.clear(this.ctx);\r\n      this.canvas.remove()\r\n      this.automove.destroy()\r\n    } else {\r\n      console.log(\"Nothing to clear\");\r\n    }\r\n  }\r\n\r\n  public drawZone() {\r\n    if (settingsStore.HideOutsideZones) {\r\n      this.AllCollection.removeClass(\"hide\");\r\n    }\r\n\r\n    \r\n    if (!this.isDrawn) {\r\n      if (this.AllCollection.length > settingsStore.MinNodesZoneShow) {\r\n        return\r\n      }\r\n\r\n      \r\n        // >/\r\n              \r\n        this.layer = (cy as any).cyCanvas({ zIndex: this.zIndex });\r\n        this.canvas = this.layer.getCanvas();\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n      \r\n      \r\n      this.automove = (cy as any).automove({\r\n        nodesMatching: this.insideCollection\r\n        .subtract(this.insideCollection[0])\r\n        .union(this.outsideCollection),\r\n        \r\n        reposition: \"drag\",\r\n        \r\n        dragWith: this.insideCollection[0],\r\n      });\r\n      \r\n      this.automove.disable();\r\n      \r\n      if (settingsStore.Automove) {\r\n        this.automove.enable();\r\n      }\r\n      this.isDrawn = true;\r\n      this.updatePath();\r\n    } else {\r\n      //this.updatePath();\r\n    }\r\n  }\r\n\r\n  private collectionPoints(hull :  cytoscape.SingularElementReturnValue[] | cytoscape.CollectionReturnValue) {\r\n    const a: Array<[number, number]> = [];\r\n\r\n    hull.forEach((element:cytoscape.NodeSingular) => {\r\n      a.push([element.position().x, element.position().y]);\r\n    });\r\n\r\n    return a\r\n  }\r\n\r\n  private convexHullPoints(\r\n    nodes: CollectionReturnValue\r\n  ): Array<[number, number]> {\r\n    nodes = nodes.sort((a: NodeSingular, b: NodeSingular) => {\r\n      return a.position().x - b.position().x;\r\n    });\r\n\r\n    let hull = [];\r\n\r\n    let leftMost;\r\n    let currentVertex;\r\n    let index;\r\n    let nextVertex;\r\n\r\n    leftMost = nodes[0];\r\n\r\n    currentVertex = leftMost;\r\n    hull.push(currentVertex);\r\n\r\n    nextVertex = nodes[1];\r\n    index = 2;\r\n\r\n    if (nodes.length < 3) {\r\n      index = 1;\r\n    }\r\n\r\n    let isRunning = true;\r\n\r\n    while (isRunning) {\r\n      const checking = nodes[index];\r\n      const a = Subtract(\r\n        [nextVertex.position().x, nextVertex.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n      const b = Subtract(\r\n        [checking.position().x, checking.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n\r\n      const cross = CrossCalc(a, b);\r\n\r\n      if (cross < 0) {\r\n        nextVertex = checking;\r\n      }\r\n\r\n      index += 1;\r\n      if (index === nodes.length) {\r\n        if (nextVertex === leftMost) {\r\n          isRunning = false;\r\n        } else {\r\n          hull.push(nextVertex);\r\n          currentVertex = nextVertex;\r\n          index = 0;\r\n          nextVertex = leftMost;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    return this.collectionPoints(hull);\r\n  }\r\n\r\n  private hullPadding = 60;\r\n\r\n  private line(\r\n    a: {\r\n      p: [number, number];\r\n      v: [number, number];\r\n    }[]\r\n  ) {\r\n    return a;\r\n  }\r\n\r\n/*\r\n    Modified \r\n\r\n    \r\n    MIT License\r\n\r\n    Copyright © 2017 Steve Hollasch\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE.imitations under the License.\r\n*/\r\n\r\n  private smoothHull(polyPoints: Array<[number, number]>) {\r\n    // Returns the SVG path data string representing the polygon, expanded and smoothed.\r\n\r\n    var pointCount = polyPoints.length;\r\n\r\n    // Handle special cases\r\n    // if (!polyPoints || pointCount < 1) return undefined;\r\n     if (pointCount === 1) this.smoothHull1(polyPoints);\r\n     if (pointCount === 2) this.smoothHull2(polyPoints);\r\n\r\n    var hullPoints = polyPoints.map(function (point, index) {\r\n      var pNext = polyPoints[(index + 1) % pointCount];\r\n      return {\r\n        p: point,\r\n        v: vecUnit(vecFrom(point, pNext)),\r\n      };\r\n    });\r\n\r\n    // Compute the expanded hull points, and the nearest prior control point for each.\r\n    for (var i = 0; i < hullPoints.length; ++i) {\r\n      var priorIndex = i > 0 ? i - 1 : pointCount - 1;\r\n      var extensionVec = vecUnit(\r\n        vecSum(hullPoints[priorIndex].v, vecScale(hullPoints[i].v, -1))\r\n      );\r\n      hullPoints[i].p = vecSum(\r\n        hullPoints[i].p,\r\n        vecScale(extensionVec, this.hullPadding)\r\n      );\r\n    }\r\n\r\n    return this.line(hullPoints);\r\n  }\r\n\r\n  private smoothHull1(polyPoints: Array<[number, number]>) {\r\n    // Returns the path for a circular hull around a single point.\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.ellipse(polyPoints[0][0], polyPoints[0][1], this.hullPadding, this.hullPadding, Math.PI / 4, 0, 2 * Math.PI);\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n/*\r\n    console.log(\r\n      \"M \" +\r\n        p1 +\r\n        \" A \" +\r\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p2].join(\",\") +\r\n        \" A \" +\r\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p1].join(\",\")\r\n    );\r\n    */\r\n  }\r\n\r\n  private smoothHull2(polyPoints: Array<[number, number]>) {\r\n    // Returns the path for a rounded hull around two points.\r\n\r\n    var v = vecFrom(polyPoints[0], polyPoints[1]);\r\n    var extensionVec = vecScaleTo(v, this.hullPadding);\r\n\r\n    var extension0 = vecSum(polyPoints[0], vecScale(extensionVec, -1));\r\n    var extension1 = vecSum(polyPoints[1], extensionVec);\r\n\r\n    var tangentHalfLength = 1.2 * this.hullPadding;\r\n    var controlDelta = vecScaleTo(unitNormal(v, undefined), tangentHalfLength);\r\n    var invControlDelta = vecScale(controlDelta, -1);\r\n\r\n    var control0 = vecSum(extension0, invControlDelta);\r\n    var control1 = vecSum(extension1, invControlDelta);\r\n    var control3 = vecSum(extension0, controlDelta);\r\n    var control4 = vecSum(extension1, controlDelta);\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(extension0[0], extension0[1]);\r\n    this.ctx.bezierCurveTo(control0[0], control0[1], control1[0], control1[1], extension1[0], extension1[1])\r\n    this.ctx.bezierCurveTo(control4[0], control4[1], control3[0], control3[1], extension0[0], extension0[1])\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n  }\r\n\r\n  private calc(allCollection: CollectionReturnValue) {\r\n    this.layer.resetTransform(this.ctx);\r\n    this.layer.clear(this.ctx);\r\n    this.layer.setTransform(this.ctx);\r\n    this.ctx.fillStyle = this.color + this.alpha;\r\n\r\n    let a;\r\n    if (allCollection.length > 2) {\r\n      a = this.smoothHull(this.convexHullPoints(allCollection));\r\n      // a.push(a[a.length - 1]);\r\n      this.ctx.save();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(a[0].p[0], a[0].p[1]);\r\n      \r\n      const x:Array<number> = []\r\n\r\n      a.forEach(element => {\r\n        x.push(element.p[0])\r\n        x.push(element.p[1])\r\n      });\r\n      this.ctx.curve(x, 0.5, 25, true);                 // add cardinal spline to path\r\n\r\n      this.ctx.closePath();\r\n      this.ctx.fill();\r\n    } else {\r\n      a = this.smoothHull(this.collectionPoints(allCollection));\r\n    }\r\n  }\r\n\r\n  private innerZone(node: Node) {\r\n    this.innerZoneNodes.push(node);\r\n    node.OwInDep.forEach((node) => {\r\n      if (!this.innerZoneNodes.includes(node)) {\r\n        this.innerZone(node);\r\n      }\r\n    });\r\n    node.TwDep.forEach((node) => {\r\n      if (!this.innerZoneNodes.includes(node)) {\r\n        this.innerZone(node);\r\n      }\r\n    });\r\n  }\r\n\r\n  private outerZone(nodes: Node[]) {\r\n    nodes.forEach((node) => {\r\n      node.OwDep.forEach((node) => {\r\n        if (\r\n          !this.innerZoneNodes.includes(node) &&\r\n          !this.outerZoneNodes[0].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[0].push(node);\r\n        }\r\n      });\r\n      node.TwDep.forEach((node) => {\r\n        if (\r\n          !this.innerZoneNodes.includes(node) &&\r\n          !this.outerZoneNodes[0].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[0].push(node);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.outerZoneNodes[0].forEach((node) => {\r\n      node.OwDep.forEach((owdep) => {\r\n        if (\r\n          this.outerZoneNodes[0].includes(owdep) &&\r\n          !this.outerZoneNodes[1].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[1].push(node);\r\n          this.outerZoneNodes[0] = this.outerZoneNodes[0].filter(\r\n            (obj) => obj.Id !== node.Id\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\ZoneStore.ts",["111"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\SettingsStore.ts",["112","113","114"],"import { Collection } from \"cytoscape\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { networkStore, zoneStore } from \"..\";\r\nimport { cy } from \"../objects/graph/Cytoscape\";\r\n\r\nexport class SettingsStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  private automove: boolean = false;\r\n  private hideOutsideZones: boolean = false;\r\n\r\n  private zIndex: number = -1;\r\n\r\n  private minNodesZoneShow: number = 1;\r\n\r\n  private selectedOption: string = \"basicZones\";\r\n\r\n  public get Automove(): boolean {\r\n    return this.automove;\r\n  }\r\n\r\n  public set Automove(v: boolean) {\r\n    this.automove = v;\r\n\r\n    zoneStore.Zones.forEach((z) => {\r\n      z.EnableAutomove = v;\r\n    });\r\n  }\r\n\r\n  public get SelectedOption(): string {\r\n    return this.selectedOption;\r\n  }\r\n\r\n  public set SelectedOption(v: string) {\r\n    this.selectedOption = v;\r\n  }\r\n\r\n  public get HideOutsideZones(): boolean {\r\n    return this.hideOutsideZones;\r\n  }\r\n\r\n  public set HideOutsideZones(v: boolean) {\r\n    this.hideOutsideZones = v;\r\n    zoneStore.HideNodesOutsideZones();\r\n  }\r\n\r\n  public get ZIndex(): number {\r\n    return this.zIndex;\r\n  }\r\n\r\n  public set ZIndex(v: number) {\r\n    this.zIndex = v;\r\n  }\r\n\r\n  public get MinNodesZoneShow(): number {\r\n    return this.minNodesZoneShow;\r\n  }\r\n\r\n  public set MinNodesZoneShow(v: number) {\r\n    this.minNodesZoneShow = v;\r\n\r\n    zoneStore.Zones.forEach((element) => {\r\n      if (element.AllCollection.length <= this.minNodesZoneShow) {\r\n        element.drawZone();\r\n      } else {\r\n        element.clearPath();\r\n      }\r\n      zoneStore.ColorNodesInZones();\r\n      zoneStore.HideNodesOutsideZones();;\r\n    });\r\n  }\r\n\r\n  private duplicates: string = \"all\";\r\n\r\n  public get Duplicates(): string {\r\n    return this.duplicates;\r\n  }\r\n\r\n  public set Duplicates(v: string) {\r\n    this.duplicates = v;\r\n    zoneStore.Duplicates();\r\n  }\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\NetworkStore.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\Graph.tsx",["115","116","117","118","119"],"import cytoscape, { ElementDefinition } from \"cytoscape\";\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nimport Zone from \"./objects/Zone\";\r\n\r\nimport { networkStore, zoneStore } from \".\";\r\nimport Cytoscape, { cy } from \"./objects/graph/Cytoscape\";\r\n\r\n\r\nexport const Graph: React.FunctionComponent = () => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const aa = new Cytoscape(container.current);\r\n\r\n    return () => {\r\n      cy.off(\"click mouseout mousein render cyCanvas.resize\");\r\n      cy.destroy();\r\n\r\n      networkStore.Network = undefined;\r\n    };\r\n  }, []);\r\n\r\n  return <div className=\"graph\" ref={container}></div>;\r\n};\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\ZoneItem.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\LeftPanel.tsx",["120","121","122","123","124","125","126","127","128"],"import {\r\n  Button,\r\n  Heading,\r\n  ListItem,\r\n  Stack,\r\n  UnorderedList,\r\n} from \"@chakra-ui/react\";\r\nimport react, { useState, useRef, useEffect, createRef } from \"react\";\r\nimport { Flex, Spacer, Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { settingsStore } from \".\";\r\n\r\nexport const LeftPanel: React.FunctionComponent = () => {\r\n  const [activeOption, setActiveOption] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(activeOption);\r\n  }, [activeOption]);\r\n\r\n  return (\r\n    <Stack p={5} w={\"10em\"}>\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Basic\r\n      </Heading>\r\n      <Button\r\n        isActive={true}\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={(e) => {\r\n          settingsStore.SelectedOption = \"basicZones\";\r\n        }}\r\n      >\r\n        Zones\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicNodes\";\r\n        }}\r\n      >\r\n        Nodes\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicEdges\";\r\n        }}\r\n      >\r\n        Edges\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicLayout\";\r\n        }}\r\n      >\r\n        Layout\r\n      </Button>\r\n\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Zones\r\n      </Heading>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesMax\";\r\n        }}\r\n      >\r\n        Max\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesMin\";\r\n        }}\r\n      >\r\n        Min\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesSubzone\";\r\n        }}\r\n      >\r\n        Subzone\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesSuperzone\";\r\n        }}\r\n      >\r\n        Superzone\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesIntersect\";\r\n        }}\r\n      >\r\n        Intersect\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\RightPanel.tsx",["129","130","131","132","133","134","135"],"import { Stack } from \"@chakra-ui/react\";\r\nimport react, { useContext } from \"react\";\r\nimport { Flex, Spacer, Box } from \"@chakra-ui/react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Context, settingsStore, zoneStore } from \".\";\r\nimport { ZoneItem } from \"./ZoneItem\";\r\nimport { BasicZones } from \"./settings/basic/BasicZones\";\r\nimport { BasicEdges } from \"./settings/basic/BasicEdges\";\r\nimport { BasicNodes } from \"./settings/basic/BasicNodes\";\r\nimport { ZonesIntersect } from \"./settings/zones/ZonesIntersect\";\r\nimport { BasicLayout } from \"./settings/basic/BasicLayout\";\r\nimport { ZonesMax } from \"./settings/zones/ZonesMax\";\r\n\r\n\r\nexport const RightPanel: React.FunctionComponent = () => {\r\n\r\n\r\n  const Settings = observer(() => (\r\n    <Stack zIndex={1} mt={5}>\r\n      {(() => {\r\n        switch (settingsStore.SelectedOption) {\r\n          case \"basicZones\":\r\n            return <BasicZones />;\r\n          case \"basicNodes\":\r\n            return <BasicNodes />;\r\n          case \"basicEdges\":\r\n            return <BasicEdges />;\r\n          case \"basicLayout\":\r\n            return <BasicLayout />;\r\n          case \"zonesMax\":\r\n            return <ZonesMax />;\r\n          case \"zonesIntersect\":\r\n            return <ZonesIntersect />;\r\n          default:\r\n            return <p>None</p>;\r\n        }\r\n      })()}\r\n    </Stack>\r\n  ));\r\n\r\n\r\n  return (\r\n    <Stack overflowY={\"scroll\"} height={\"100vh\"} width={\"25vw\"} p={5}>\r\n      <Box>\r\n        <Settings />\r\n      </Box>\r\n    </Stack>\r\n  );\r\n};\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicZones.tsx",["136","137"],"import React, { useContext } from \"react\";\r\nimport Zone from \"../../objects/Zone\";\r\nimport {\r\n  Stack,\r\n  Button,\r\n  Checkbox,\r\n  Select,\r\n  Spacer,\r\n  Divider,\r\n  Slider,\r\n  SliderTrack,\r\n  SliderThumb,\r\n  SliderFilledTrack,\r\n  Heading,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { ZoneItem } from \"../../ZoneItem\";\r\nimport { Context, networkStore, settingsStore, zoneStore } from \"../../.\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport const BasicZones: React.FunctionComponent = () => {\r\n  const context = useContext(Context);\r\n\r\n  const Zones = observer(() => (\r\n    <div>\r\n      {zoneStore.Zones.map((z, i) => {\r\n        return <ZoneItem zone={z} key={i}></ZoneItem>;\r\n      })}\r\n    </div>\r\n  ));\r\n\r\n  const NodesWithLessThanSlider = observer(() => {\r\n    return (\r\n      <div>\r\n        <Text fontSize=\"md\">\r\n          Hide zones with less than {settingsStore.MinNodesZoneShow} nodes\r\n        </Text>\r\n\r\n        <Slider\r\n          aria-label=\"slider-ex-1\"\r\n          defaultValue={settingsStore.MinNodesZoneShow}\r\n          min={0}\r\n          max={networkStore.Network?.Nodes.length}\r\n          onChange={(e) => {\r\n            settingsStore.MinNodesZoneShow = e;\r\n          }}\r\n        >\r\n          <SliderTrack>\r\n            <SliderFilledTrack />\r\n          </SliderTrack>\r\n          <SliderThumb />\r\n        </Slider>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <Stack>\r\n      <Heading as=\"h4\" size=\"md\" pb={5}>\r\n        Add zones\r\n      </Heading>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          networkStore.Network?.Nodes.forEach((n) => {\r\n            if (n.isProminent() === 0) {\r\n              const z = new Zone(n);\r\n              zoneStore.AddZone(z);\r\n            }\r\n          });\r\n        }}\r\n      >\r\n        Strongly prominent\r\n      </Button>\r\n\r\n      <Button\r\n        onClick={() => {\r\n          networkStore.Network?.Nodes.forEach((n) => {\r\n            if (n.isProminent() === 1) {\r\n              const z = new Zone(n);\r\n              zoneStore.AddZone(z);\r\n            }\r\n          });\r\n        }}\r\n      >\r\n        Weakly prominent\r\n      </Button>\r\n      <Heading as=\"h4\" size=\"md\" pb={5} pt={5}>\r\n        Remove zones\r\n      </Heading>\r\n      <Button\r\n        colorScheme={\"red\"}\r\n        onClick={() => {\r\n          zoneStore.ClearZones();\r\n        }}\r\n      >\r\n        Clear zones\r\n      </Button>\r\n      <Heading as=\"h4\" size=\"md\" pb={5} pt={5}>\r\n        Duplicates\r\n      </Heading>\r\n      <Select\r\n        defaultValue={settingsStore.Duplicates}\r\n        isFullWidth={true}\r\n        onChange={(e) => {\r\n          settingsStore.Duplicates = e.target.value;\r\n        }}\r\n      >\r\n        <option value=\"all\">All</option>\r\n        <option value=\"me\">Mutli-ego</option>\r\n        <option value=\"de\">Duplicates</option>\r\n      </Select>\r\n\r\n      <Heading as=\"h4\" size=\"md\" pb={5} pt={5}>\r\n        Options\r\n      </Heading>\r\n      <Checkbox\r\n        defaultIsChecked={settingsStore.Automove}\r\n        onChange={(e) => {\r\n          settingsStore.Automove = e.target.checked;\r\n        }}\r\n      >\r\n        Move zone\r\n      </Checkbox>\r\n\r\n      <Checkbox\r\n        defaultIsChecked={true}\r\n        onChange={(e) => {\r\n          if (e.target.checked) {\r\n            settingsStore.ZIndex = 0;\r\n          } else {\r\n            settingsStore.ZIndex = -1;\r\n          }\r\n        }}\r\n      >\r\n        Z-index\r\n      </Checkbox>\r\n\r\n      <Divider></Divider>\r\n      <NodesWithLessThanSlider />\r\n\r\n      <Heading as=\"h4\" size=\"md\" pb={5} pt={5}>\r\n        Zones\r\n      </Heading>\r\n      <Zones />\r\n    </Stack>\r\n  );\r\n};\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicEdges.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicNodes.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesIntersect.tsx",["138","139","140","141"],"import { Button, Select, Stack, Text } from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { zoneStore } from \"../..\";\r\n\r\nexport function ZonesIntersect() {\r\n  const [z, setZ] = useState([]);\r\n  return (\r\n    <Stack>\r\n      <Select placeholder=\"None\" onChange={(e) => {}}>\r\n        {zoneStore.Zones.map((z, i) => {\r\n          return <option value={i}>{z.Ego.Id}</option>;\r\n        })}\r\n      </Select>\r\n    </Stack>\r\n  );\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Vector.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicLayout.tsx",["142"],"import { Button, Divider, Heading, Select, Spacer } from \"@chakra-ui/react\";\r\nimport React, { useRef } from \"react\";\r\nimport { cy } from \"../../objects/graph/Cytoscape\";\r\n\r\nexport function BasicLayout() {\r\n  const layoutRef = useRef<HTMLSelectElement>(null);\r\n  return (\r\n    <div>\r\n      <Heading as=\"h4\" size=\"md\" pb={5}>\r\n        Layout\r\n      </Heading>\r\n      <Select ref={layoutRef} mb={5} placeholder=\"Select layout\">\r\n        <option value=\"cola\">Cola</option>\r\n        <option value=\"random\">Random</option>\r\n      </Select>\r\n\r\n      <Button\r\n        isFullWidth={true}\r\n        onClick={() => {\r\n          switch (layoutRef.current?.value) {\r\n            case \"cola\":\r\n              cy.layout({ name: \"cola\" }).run();\r\n              break;\r\n            case \"random\":\r\n              cy.layout({ name: \"random\" }).run();\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }}\r\n      >\r\n        Apply\r\n      </Button>\r\n\r\n      <Divider></Divider>\r\n      <Button\r\n        mt={5}\r\n        isFullWidth={true}\r\n        onClick={() => {\r\n          cy.fit();\r\n        }}\r\n      >\r\n        Reset view\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesMax.tsx",["143","144","145","146","147"],"import { Button, Heading, Select, Stack, Text } from \"@chakra-ui/react\";\r\nimport { autorun, observe } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { zoneStore } from \"../..\";\r\nimport { ZoneItem } from \"../../ZoneItem\";\r\n\r\nexport function ZonesMax() {\r\n  useEffect(() => {\r\n    return () => {};\r\n  });\r\n\r\n  autorun(() => {\r\n    console.log(zoneStore.Zones);\r\n  });\r\n\r\n  const LargestZone = observer(() => {\r\n    return (\r\n      <ZoneItem\r\n        zone={\r\n          [...zoneStore.Zones].sort(\r\n            (a, b) => b.AllCollection.length - a.AllCollection.length\r\n          )[0]\r\n        }\r\n      ></ZoneItem>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Stack>\r\n      <Heading as=\"h4\" size=\"md\" pb={5}>\r\n        Max zone\r\n      </Heading>\r\n      {zoneStore.Zones.length > 0 && <LargestZone />}\r\n    </Stack>\r\n  );\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\graph\\Cytoscape.tsx",["148","149","150"],"import cytoscape, { ElementDefinition } from \"cytoscape\";\r\n// @ts-ignore\r\nimport cola from \"cytoscape-cola\";\r\nimport { networkStore, settingsStore, zoneStore } from \"../..\";\r\nimport type Network from \"../Network\";\r\nimport Zone from \"../Zone\";\r\n\r\nexport let cy: cytoscape.Core;\r\n\r\nexport default class Cytoscape {\r\n  constructor(div: HTMLDivElement | null) {\r\n    if (networkStore.Network) {\r\n      cy = cytoscape({\r\n        container: div,\r\n        elements: [\r\n          ...networkStore.Network.Nodes.map((e) => e.PlainObject()),\r\n          ...networkStore.Network.Edges.map((e) => e.PlainObject()),\r\n        ],\r\n        wheelSensitivity: 0.3,\r\n        style: [\r\n          // the stylesheet for the graph\r\n          {\r\n            selector: \"node\",\r\n            style: {\r\n              label: \"data(id)\",\r\n              \"text-valign\": \"center\",\r\n              \"text-halign\": \"center\",\r\n            },\r\n          },\r\n          {\r\n            selector: \".hide\",\r\n            style: {\r\n              display: \"none\",\r\n            },\r\n          },\r\n          {\r\n            selector: \".weaklyProminent\",\r\n            style: {\r\n              \"background-color\": \"yellow\",\r\n              label: \"data(id)\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".stronglyProminent\",\r\n            style: {\r\n              \"background-color\": \"red\",\r\n              label: \"data(id)\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".nonProminent\",\r\n            style: {\r\n              \"background-color\": \"lime\",\r\n              label: \"data(id)\",\r\n            },\r\n          },\r\n          {\r\n            selector: \".coliaisons\",\r\n            style: {\r\n              \"background-color\": \"cyan\",\r\n              label: \"data(id)\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".liaisons\",\r\n            style: {\r\n              \"background-color\": \"blue\",\r\n              label: \"data(id)\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".owdep\",\r\n            style: {\r\n              \"target-arrow-shape\": \"triangle\",\r\n              \"curve-style\": \"straight\",\r\n            },\r\n          },\r\n          {\r\n            selector: \".twdep\",\r\n            style: {\r\n              \"target-arrow-shape\": \"triangle\",\r\n              \"source-arrow-shape\": \"triangle\",\r\n              \"curve-style\": \"straight\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".sptowp\",\r\n            style: {\r\n              \"line-color\": \"orange\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".sptosp\",\r\n            style: {\r\n              \"line-color\": \"red\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".wptowp\",\r\n            style: {\r\n              \"line-color\": \"yellow\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".wptonp\",\r\n            style: {\r\n              \"line-color\": \"lime\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".sptonp\",\r\n            style: {\r\n              \"line-color\": \"brown\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".nptonp\",\r\n            style: {\r\n              \"line-color\": \"green\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".owindep\",\r\n            style: {\r\n              \"target-arrow-color\": \"#ccc\",\r\n              \"target-arrow-shape\": \"triangle\",\r\n              \"curve-style\": \"straight\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \".twindep\",\r\n            style: {\r\n              \"curve-style\": \"straight\",\r\n            },\r\n          },\r\n\r\n          {\r\n            selector: \"edge\",\r\n            style: {\r\n              width: 3,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n\r\n      let z: Zone | undefined = undefined;\r\n      cy.on(\"mouseover\", \"node\", (event) => {\r\n        if (networkStore.Network) {\r\n          z = new Zone(\r\n            networkStore.Network.Nodes.filter(\r\n              (e) => e.Id.toString() === event.target._private.data.id\r\n            )[0]\r\n          );\r\n          zoneStore.ColorNodesInZone(z);\r\n        }\r\n      });\r\n\r\n      cy.on(\"mouseout\", \"node\", (event) => {\r\n        zoneStore.ColorNodesInZones();\r\n        z = undefined;\r\n      });\r\n\r\n      cy.on(\"click\", \"node\", function (event) {\r\n        if (networkStore.Network) {\r\n          const z = new Zone(\r\n            networkStore.Network.Nodes.filter(\r\n              (e) => e.Id === event.target._private.data.id\r\n            )[0]\r\n          );\r\n          zoneStore.AddZone(z);\r\n          z.drawZone();\r\n          zoneStore.HideNodesOutsideZones();\r\n        }\r\n      });\r\n\r\n      cy.on(\"click\", \"edge\", function (event) {\r\n        console.log(event);\r\n\r\n        console.log(\r\n          networkStore.Network?.getEdge(\r\n            event.target.source,\r\n            event.target.target\r\n          )\r\n        );\r\n      });\r\n\r\n      cy.on(\"render cyCanvas.resize\", (evt: cytoscape.EventObject) => {\r\n        zoneStore.Zones.forEach((z) => {\r\n          z.updatePath();\r\n        });\r\n      });\r\n\r\n      const automove = require(\"cytoscape-automove\");\r\n      const cycanvas = require(\"cytoscape-canvas\");\r\n\r\n      cytoscape.use(automove);\r\n      cytoscape.use(cycanvas);\r\n      cytoscape.use(cola);\r\n    }\r\n  }\r\n}\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":11,"column":10,"nodeType":"157","messageId":"158","endLine":11,"endColumn":18},{"ruleId":"155","severity":1,"message":"159","line":5,"column":3,"nodeType":"157","messageId":"158","endLine":5,"endColumn":19},{"ruleId":"155","severity":1,"message":"160","line":21,"column":10,"nodeType":"157","messageId":"158","endLine":21,"endColumn":14},{"ruleId":"155","severity":1,"message":"161","line":5,"column":36,"nodeType":"157","messageId":"158","endLine":5,"endColumn":53},{"ruleId":"155","severity":1,"message":"162","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":20},{"ruleId":"155","severity":1,"message":"163","line":3,"column":10,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"164","line":4,"column":10,"nodeType":"157","messageId":"158","endLine":4,"endColumn":12},{"ruleId":"155","severity":1,"message":"165","line":1,"column":8,"nodeType":"157","messageId":"158","endLine":1,"endColumn":17},{"ruleId":"155","severity":1,"message":"161","line":1,"column":21,"nodeType":"157","messageId":"158","endLine":1,"endColumn":38},{"ruleId":"155","severity":1,"message":"166","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":12},{"ruleId":"155","severity":1,"message":"167","line":7,"column":24,"nodeType":"157","messageId":"158","endLine":7,"endColumn":33},{"ruleId":"155","severity":1,"message":"168","line":15,"column":11,"nodeType":"157","messageId":"158","endLine":15,"endColumn":13},{"ruleId":"155","severity":1,"message":"169","line":4,"column":3,"nodeType":"157","messageId":"158","endLine":4,"endColumn":11},{"ruleId":"155","severity":1,"message":"170","line":6,"column":3,"nodeType":"157","messageId":"158","endLine":6,"endColumn":16},{"ruleId":"155","severity":1,"message":"171","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":13},{"ruleId":"155","severity":1,"message":"172","line":8,"column":27,"nodeType":"157","messageId":"158","endLine":8,"endColumn":33},{"ruleId":"155","severity":1,"message":"173","line":8,"column":46,"nodeType":"157","messageId":"158","endLine":8,"endColumn":55},{"ruleId":"155","severity":1,"message":"174","line":9,"column":10,"nodeType":"157","messageId":"158","endLine":9,"endColumn":14},{"ruleId":"155","severity":1,"message":"175","line":9,"column":16,"nodeType":"157","messageId":"158","endLine":9,"endColumn":22},{"ruleId":"155","severity":1,"message":"176","line":9,"column":24,"nodeType":"157","messageId":"158","endLine":9,"endColumn":27},{"ruleId":"155","severity":1,"message":"177","line":14,"column":24,"nodeType":"157","messageId":"158","endLine":14,"endColumn":39},{"ruleId":"155","severity":1,"message":"171","line":2,"column":8,"nodeType":"157","messageId":"158","endLine":2,"endColumn":13},{"ruleId":"155","severity":1,"message":"178","line":2,"column":17,"nodeType":"157","messageId":"158","endLine":2,"endColumn":27},{"ruleId":"155","severity":1,"message":"174","line":3,"column":10,"nodeType":"157","messageId":"158","endLine":3,"endColumn":14},{"ruleId":"155","severity":1,"message":"175","line":3,"column":16,"nodeType":"157","messageId":"158","endLine":3,"endColumn":22},{"ruleId":"155","severity":1,"message":"179","line":5,"column":10,"nodeType":"157","messageId":"158","endLine":5,"endColumn":17},{"ruleId":"155","severity":1,"message":"167","line":5,"column":34,"nodeType":"157","messageId":"158","endLine":5,"endColumn":43},{"ruleId":"155","severity":1,"message":"156","line":6,"column":10,"nodeType":"157","messageId":"158","endLine":6,"endColumn":18},{"ruleId":"155","severity":1,"message":"175","line":8,"column":3,"nodeType":"157","messageId":"158","endLine":8,"endColumn":9},{"ruleId":"155","severity":1,"message":"180","line":22,"column":9,"nodeType":"157","messageId":"158","endLine":22,"endColumn":16},{"ruleId":"155","severity":1,"message":"181","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":16},{"ruleId":"155","severity":1,"message":"182","line":1,"column":33,"nodeType":"157","messageId":"158","endLine":1,"endColumn":37},{"ruleId":"155","severity":1,"message":"183","line":6,"column":10,"nodeType":"157","messageId":"158","endLine":6,"endColumn":11},{"ruleId":"155","severity":1,"message":"184","line":6,"column":13,"nodeType":"157","messageId":"158","endLine":6,"endColumn":17},{"ruleId":"155","severity":1,"message":"175","line":1,"column":44,"nodeType":"157","messageId":"158","endLine":1,"endColumn":50},{"ruleId":"155","severity":1,"message":"181","line":1,"column":10,"nodeType":"157","messageId":"158","endLine":1,"endColumn":16},{"ruleId":"155","severity":1,"message":"185","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":33},{"ruleId":"155","severity":1,"message":"182","line":1,"column":42,"nodeType":"157","messageId":"158","endLine":1,"endColumn":46},{"ruleId":"155","severity":1,"message":"186","line":2,"column":19,"nodeType":"157","messageId":"158","endLine":2,"endColumn":26},{"ruleId":"155","severity":1,"message":"187","line":4,"column":28,"nodeType":"157","messageId":"158","endLine":4,"endColumn":36},{"ruleId":"155","severity":1,"message":"161","line":1,"column":21,"nodeType":"157","messageId":"158","endLine":1,"endColumn":38},{"ruleId":"155","severity":1,"message":"188","line":4,"column":24,"nodeType":"157","messageId":"158","endLine":4,"endColumn":37},{"ruleId":"155","severity":1,"message":"189","line":5,"column":13,"nodeType":"157","messageId":"158","endLine":5,"endColumn":20},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"@typescript-eslint/no-unused-vars","'ZoneItem' is defined but never used.","Identifier","unusedVar","'CytoscapeOptions' is defined but never used.","'Fade' is defined but never used.","'ElementDefinition' is defined but never used.","'Collection' is defined but never used.","'networkStore' is defined but never used.","'cy' is defined but never used.","'cytoscape' is defined but never used.","'Zone' is defined but never used.","'zoneStore' is defined but never used.","'aa' is assigned a value but never used.","'ListItem' is defined but never used.","'UnorderedList' is defined but never used.","'react' is defined but never used.","'useRef' is defined but never used.","'createRef' is defined but never used.","'Flex' is defined but never used.","'Spacer' is defined but never used.","'Box' is defined but never used.","'setActiveOption' is assigned a value but never used.","'useContext' is defined but never used.","'Context' is defined but never used.","'context' is assigned a value but never used.","'Button' is defined but never used.","'Text' is defined but never used.","'z' is assigned a value but never used.","'setZ' is assigned a value but never used.","'Select' is defined but never used.","'observe' is defined but never used.","'useState' is defined but never used.","'settingsStore' is defined but never used.","'Network' is defined but never used.","no-global-assign","no-unsafe-negation"]