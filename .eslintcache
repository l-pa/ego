[{"C:\\Users\\Lukas\\Desktop\\ego\\src\\index.tsx":"1","C:\\Users\\Lukas\\Desktop\\ego\\src\\reportWebVitals.ts":"2","C:\\Users\\Lukas\\Desktop\\ego\\src\\App.tsx":"3","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\DependencyMatrix.ts":"4","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Network.ts":"5","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Node.ts":"6","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Edge.ts":"7","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Zone.ts":"8","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\ZoneStore.ts":"9","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\SettingsStore.ts":"10","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\NetworkStore.ts":"11","C:\\Users\\Lukas\\Desktop\\ego\\src\\Graph.tsx":"12","C:\\Users\\Lukas\\Desktop\\ego\\src\\ZoneItem.tsx":"13","C:\\Users\\Lukas\\Desktop\\ego\\src\\LeftPanel.tsx":"14","C:\\Users\\Lukas\\Desktop\\ego\\src\\RightPanel.tsx":"15","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicZones.tsx":"16","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicEdges.tsx":"17","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicNodes.tsx":"18","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesIntersect.tsx":"19","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Vector.ts":"20","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicLayout.tsx":"21","C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesMax.tsx":"22"},{"size":1126,"mtime":1608676977696,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":2075,"mtime":1609088991702,"results":"26","hashOfConfig":"24"},{"size":6815,"mtime":1608559090784,"results":"27","hashOfConfig":"24"},{"size":1469,"mtime":1608714477605,"results":"28","hashOfConfig":"24"},{"size":2604,"mtime":1608558996718,"results":"29","hashOfConfig":"24"},{"size":2332,"mtime":1609340295838,"results":"30","hashOfConfig":"24"},{"size":16587,"mtime":1609355723455,"results":"31","hashOfConfig":"24"},{"size":11392,"mtime":1609356934414,"results":"32","hashOfConfig":"24"},{"size":2152,"mtime":1609356785534,"results":"33","hashOfConfig":"24"},{"size":566,"mtime":1609342079132,"results":"34","hashOfConfig":"24"},{"size":10186,"mtime":1609358123208,"results":"35","hashOfConfig":"24"},{"size":5042,"mtime":1608802709039,"results":"36","hashOfConfig":"24"},{"size":2812,"mtime":1609087601186,"results":"37","hashOfConfig":"24"},{"size":1532,"mtime":1610645194219,"results":"38","hashOfConfig":"24"},{"size":3517,"mtime":1610644862502,"results":"39","hashOfConfig":"24"},{"size":226,"mtime":1610644469192,"results":"40","hashOfConfig":"24"},{"size":592,"mtime":1610644503126,"results":"41","hashOfConfig":"24"},{"size":449,"mtime":1609020253041,"results":"42","hashOfConfig":"24"},{"size":1577,"mtime":1609099085121,"results":"43","hashOfConfig":"24"},{"size":968,"mtime":1610644380720,"results":"44","hashOfConfig":"24"},{"size":882,"mtime":1610646238530,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1m8gn3d",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lukas\\Desktop\\ego\\src\\index.tsx",[],["97","98"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\reportWebVitals.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\App.tsx",["99"],"import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport Matrix from \"./objects/DependencyMatrix\";\r\nimport { Graph } from \"./Graph\";\r\nimport Node from \"./objects/Node\";\r\nimport Network from \"./objects/Network\";\r\nimport { Context } from \".\";\r\nimport { reaction } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { ZoneItem } from \"./ZoneItem\";\r\nimport { Box, ChakraProvider, Divider, Flex, Stack } from \"@chakra-ui/react\";\r\nimport { LeftPanel } from \"./LeftPanel\";\r\nimport { RightPanel } from \"./RightPanel\";\r\n\r\nfunction App() {\r\n  const context = useContext(Context);\r\n\r\n  reaction(\r\n    () => context.network.Network,\r\n    (Network) => {\r\n      console.log(Network);\r\n    }\r\n  );\r\n\r\n  const App = observer(() => {\r\n    return (\r\n      <div className=\"App\">\r\n        {!context.network.Network && (\r\n          <CSVReader\r\n            onFileLoaded={(data, fileInfo) => {\r\n              const network = new Network([], []);\r\n              console.log(fileInfo);\r\n              for (let i = 0; i < data.length; i++) {\r\n                const element = data[i];\r\n                network.addEdge(\r\n                  new Node(element[0]),\r\n                  new Node(element[1]),\r\n                  Number.parseFloat(element[2])\r\n                );\r\n              }\r\n              new Matrix(network).nodesDependency();\r\n              context.network.Network = network;\r\n            }}\r\n          />\r\n        )}\r\n        {context.network.Network && (\r\n          <div>\r\n            <Stack>\r\n              <Flex>\r\n                <LeftPanel />\r\n                <Divider height={\"100vh\"} orientation=\"vertical\" />\r\n                <Box flex={1}>\r\n                  <Graph />\r\n                </Box>\r\n                <Divider height={\"100vh\"} orientation=\"vertical\" />\r\n                <RightPanel />\r\n              </Flex>\r\n            </Stack>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <ChakraProvider>\r\n      <App />\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\DependencyMatrix.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Network.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Node.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Edge.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Zone.ts",["100"],"import type Node from \"./Node\";\r\nimport cytoscape, {\r\n  Collection,\r\n  CollectionReturnValue,\r\n  CytoscapeOptions,\r\n  NodeSingular,\r\n} from \"cytoscape\";\r\nimport { cy } from \"../Graph\";\r\nimport { settingsStore, zoneStore } from \"..\";\r\nimport {\r\n  CrossCalc,\r\n  Subtract,\r\n  unitNormal,\r\n  vecFrom,\r\n  vecScale,\r\n  vecScaleTo,\r\n  vecSum,\r\n  vecUnit,\r\n} from \"./Vector\";\r\n\r\nexport default class Zone {\r\n  public Ego: Node;\r\n  public innerZoneNodes: Node[];\r\n  public outerZoneNodes: Node[][];\r\n\r\n  private color: string =\r\n    \"#\" +\r\n    Math.floor(Math.random() * 16777215)\r\n      .toString(16)\r\n      .padStart(6, \"0\");\r\n\r\n  private alpha: string = \"80\";\r\n  public isDrawn: boolean = false;\r\n\r\n  private isZoneShown: boolean = true;\r\n  private areShownNodes: boolean = false;\r\n\r\n  private zIndex: number = -1;\r\n\r\n  private automove: any;\r\n\r\n  private layer: any = (cy as any).cyCanvas({ zIndex: this.zIndex });\r\n  private canvas: any = this.layer.getCanvas();\r\n  private ctx: any = this.canvas.getContext(\"2d\");\r\n\r\n  private insideCollection: Collection = cytoscape().collection();\r\n  private outsideCollection: Collection = cytoscape().collection();\r\n  private allCollection: Collection = cytoscape().collection();\r\n\r\n\r\n  private hull: NodeSingular[] = [];\r\n\r\n  private label: string = \"\";\r\n\r\n  constructor(ego: Node) {\r\n    this.Ego = ego;\r\n\r\n    this.innerZoneNodes = [];\r\n    this.outerZoneNodes = [[], []];\r\n\r\n    this.innerZone(ego);\r\n    this.outerZone(this.innerZoneNodes);\r\n\r\n    this.insideCollection = cy.collection();\r\n    this.outsideCollection = cy.collection();\r\n    this.allCollection = cy.collection();\r\n\r\n\r\n    //   let insideCollectionEdges = cy.collection();\r\n    //   let outsideCollectionEdges = cy.collection();\r\n\r\n    this.innerZoneNodes.forEach((node) => {\r\n      this.insideCollection = this.insideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n      /*        insideCollectionEdges = insideCollectionEdges.union(\r\n          cy.edges(`[source ='${node.Id.toString()}']`)\r\n        );\r\n\r\n        insideCollectionEdges = insideCollectionEdges.union(\r\n          cy.edges(`[target ='${node.Id.toString()}']`)\r\n        );\r\n        */\r\n    });\r\n\r\n    this.outerZoneNodes[0].forEach((node) => {\r\n      this.outsideCollection = this.outsideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n    });\r\n\r\n    this.outerZoneNodes[1].forEach((node) => {\r\n      this.outsideCollection = this.outsideCollection.union(\r\n        cy.nodes(`[id ='${node.Id.toString()}']`)[0]\r\n      );\r\n    });\r\n\r\n    //     this.drawZone();\r\n  }\r\n\r\n  public set Alpha(alpha: string) {\r\n    this.alpha = alpha.padStart(2, \"0\");\r\n\r\n    if (this.isZoneShown) {\r\n      this.updatePath();\r\n    }\r\n  }\r\n\r\n  public set Zindex(index: number) {\r\n    this.zIndex = index;\r\n    this.clearPath();\r\n    if (this.isZoneShown) {\r\n      this.layer = (cy as any).cyCanvas({ zIndex: this.zIndex });\r\n      this.canvas = this.layer.getCanvas();\r\n      this.ctx = this.canvas.getContext(\"2d\");\r\n      this.drawZone();\r\n    }\r\n  }\r\n\r\n  public get IsDrawn(): boolean {\r\n    return this.isDrawn;\r\n  }\r\n\r\n  public get InsideCollection() {\r\n    return this.insideCollection;\r\n  }\r\n\r\n  public get OutsideCollection() {\r\n    return this.outsideCollection;\r\n  }\r\n\r\n  public get AllCollection() {\r\n    return this.outsideCollection.union(this.insideCollection);\r\n  }\r\n\r\n  public get Label() {\r\n    return this.label;\r\n  }\r\n\r\n  public set Label(label: string) {\r\n    this.label = label;\r\n    this.updatePath();\r\n  }\r\n\r\n  public set EnableAutomove(enable: boolean) {\r\n    if (enable) {\r\n      this.automove.enable();\r\n    } else {\r\n      this.automove.disable();\r\n    }\r\n  }\r\n\r\n  public get AreShownNodes() {\r\n    return this.areShownNodes;\r\n  }\r\n\r\n  public get IsZoneShown() {\r\n    return this.isZoneShown;\r\n  }\r\n\r\n  public set AreShownNodes(show: boolean) {\r\n    this.areShownNodes = show;\r\n  }\r\n\r\n  public set IsZoneShown(show: boolean) {\r\n    this.isZoneShown = show;\r\n\r\n    if (this.isZoneShown) {\r\n      this.drawZone();\r\n    } else {\r\n      this.clearPath();\r\n    }\r\n  }\r\n\r\n  public set Color(color: string) {\r\n    this.color = color;\r\n    this.updatePath();\r\n  }\r\n\r\n  public get Color() {\r\n    return this.color;\r\n  }\r\n\r\n  public get Alpha() {\r\n    return this.alpha;\r\n  }\r\n\r\n  public updatePath() {\r\n    if (this.isDrawn) {\r\n      this.calc(this.insideCollection.union(this.outsideCollection));\r\n    }\r\n  }\r\n\r\n  public applyLayout(layout: string) {\r\n    this.insideCollection\r\n      .union(this.outsideCollection)\r\n      .layout({\r\n        name: layout,\r\n      })\r\n      .start();\r\n  }\r\n\r\n  public clearPath() {\r\n    if (settingsStore.HideOutsideZones) {\r\n      let nodesInZonesExceptZ: Collection = cy.collection();\r\n      zoneStore.Zones.filter((zone) => zone.Ego.Id !== this.Ego.Id).forEach(\r\n        (element) => {\r\n          nodesInZonesExceptZ = nodesInZonesExceptZ.union(\r\n            element.AllCollection\r\n          );\r\n        }\r\n      );\r\n\r\n      this.AllCollection.difference(nodesInZonesExceptZ).addClass(\"hide\");\r\n    }\r\n    \r\n    if (this.isDrawn) {\r\n      this.isDrawn = false;\r\n      //  this.cy?.off(\"render cyCanvas.resize\");\r\n      this.layer.clear(this.ctx);\r\n      // this.canvas.remove();\r\n\r\n      // this.cy.automove(\"destroy\");\r\n    } else {\r\n      console.log(\"Nothing to clear\");\r\n    }\r\n  }\r\n\r\n  public drawZone() {\r\n    if (settingsStore.HideOutsideZones) {\r\n      this.AllCollection.removeClass(\"hide\");\r\n    }\r\n    if (!this.isDrawn) {\r\n      this.isDrawn = true;\r\n      // this.layer = (cy as any).cyCanvas({ zIndex: this.zIndex });\r\n      // this.canvas = this.layer.getCanvas();\r\n      // this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n      this.automove = (cy as any).automove({\r\n        nodesMatching: this.insideCollection\r\n          .subtract(this.insideCollection[0])\r\n          .union(this.outsideCollection),\r\n\r\n        reposition: \"drag\",\r\n\r\n        dragWith: this.insideCollection[0],\r\n      });\r\n\r\n      this.automove.disable();\r\n\r\n      if (settingsStore.Automove) {\r\n        this.automove.enable();\r\n      }\r\n      this.updatePath();\r\n    } else {\r\n      //this.updatePath();\r\n    }\r\n  }\r\n\r\n  private convexHull(nodes: CollectionReturnValue): NodeSingular[] {\r\n    nodes = nodes.sort((a: NodeSingular, b: NodeSingular) => {\r\n      return a.position().x - b.position().x;\r\n    });\r\n\r\n    let hull = [];\r\n\r\n    let leftMost;\r\n    let currentVertex;\r\n    let index;\r\n    let nextVertex;\r\n\r\n    leftMost = nodes[0];\r\n\r\n    currentVertex = leftMost;\r\n    hull.push(currentVertex);\r\n\r\n    nextVertex = nodes[1];\r\n    index = 2;\r\n\r\n    if (nodes.length < 3) {\r\n      index = 1;\r\n    }\r\n\r\n    let isRunning = true;\r\n\r\n    while (isRunning) {\r\n      const checking = nodes[index];\r\n      const a = Subtract(\r\n        [nextVertex.position().x, nextVertex.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n      const b = Subtract(\r\n        [checking.position().x, checking.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n\r\n      const cross = CrossCalc(a, b);\r\n\r\n      if (cross < 0) {\r\n        nextVertex = checking;\r\n      }\r\n\r\n      index += 1;\r\n      if (index === nodes.length) {\r\n        if (nextVertex === leftMost) {\r\n          isRunning = false;\r\n        } else {\r\n          hull.push(nextVertex);\r\n          currentVertex = nextVertex;\r\n          index = 0;\r\n          nextVertex = leftMost;\r\n        }\r\n      }\r\n    }\r\n\r\n    return hull;\r\n  }\r\n\r\n  private collectionPoints(hull :  cytoscape.SingularElementReturnValue[] | cytoscape.CollectionReturnValue) {\r\n    const a: Array<[number, number]> = [];\r\n\r\n    hull.forEach((element:cytoscape.NodeSingular) => {\r\n      a.push([element.position().x, element.position().y]);\r\n    });\r\n\r\n    return a\r\n  }\r\n\r\n  private convexHullPoints(\r\n    nodes: CollectionReturnValue\r\n  ): Array<[number, number]> {\r\n    nodes = nodes.sort((a: NodeSingular, b: NodeSingular) => {\r\n      return a.position().x - b.position().x;\r\n    });\r\n\r\n    let hull = [];\r\n\r\n    let leftMost;\r\n    let currentVertex;\r\n    let index;\r\n    let nextVertex;\r\n\r\n    leftMost = nodes[0];\r\n\r\n    currentVertex = leftMost;\r\n    hull.push(currentVertex);\r\n\r\n    nextVertex = nodes[1];\r\n    index = 2;\r\n\r\n    if (nodes.length < 3) {\r\n      index = 1;\r\n    }\r\n\r\n    let isRunning = true;\r\n\r\n    while (isRunning) {\r\n      const checking = nodes[index];\r\n      const a = Subtract(\r\n        [nextVertex.position().x, nextVertex.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n      const b = Subtract(\r\n        [checking.position().x, checking.position().y],\r\n        [currentVertex.position().x, currentVertex.position().y]\r\n      );\r\n\r\n      const cross = CrossCalc(a, b);\r\n\r\n      if (cross < 0) {\r\n        nextVertex = checking;\r\n      }\r\n\r\n      index += 1;\r\n      if (index === nodes.length) {\r\n        if (nextVertex === leftMost) {\r\n          isRunning = false;\r\n        } else {\r\n          hull.push(nextVertex);\r\n          currentVertex = nextVertex;\r\n          index = 0;\r\n          nextVertex = leftMost;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    return this.collectionPoints(hull);\r\n  }\r\n\r\n  private hullPadding = 60;\r\n\r\n  private line(\r\n    a: {\r\n      p: [number, number];\r\n      v: [number, number];\r\n    }[]\r\n  ) {\r\n    return a;\r\n  }\r\n\r\n/*\r\n    Modified \r\n\r\n    \r\n    MIT License\r\n\r\n    Copyright © 2017 Steve Hollasch\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE.imitations under the License.\r\n*/\r\n\r\n  private smoothHull(polyPoints: Array<[number, number]>) {\r\n    // Returns the SVG path data string representing the polygon, expanded and smoothed.\r\n\r\n    var pointCount = polyPoints.length;\r\n\r\n    // Handle special cases\r\n    // if (!polyPoints || pointCount < 1) return undefined;\r\n     if (pointCount === 1) this.smoothHull1(polyPoints);\r\n     if (pointCount === 2) this.smoothHull2(polyPoints);\r\n\r\n    var hullPoints = polyPoints.map(function (point, index) {\r\n      var pNext = polyPoints[(index + 1) % pointCount];\r\n      return {\r\n        p: point,\r\n        v: vecUnit(vecFrom(point, pNext)),\r\n      };\r\n    });\r\n\r\n    // Compute the expanded hull points, and the nearest prior control point for each.\r\n    for (var i = 0; i < hullPoints.length; ++i) {\r\n      var priorIndex = i > 0 ? i - 1 : pointCount - 1;\r\n      var extensionVec = vecUnit(\r\n        vecSum(hullPoints[priorIndex].v, vecScale(hullPoints[i].v, -1))\r\n      );\r\n      hullPoints[i].p = vecSum(\r\n        hullPoints[i].p,\r\n        vecScale(extensionVec, this.hullPadding)\r\n      );\r\n    }\r\n\r\n    return this.line(hullPoints);\r\n  }\r\n\r\n  private smoothHull1(polyPoints: Array<[number, number]>) {\r\n    // Returns the path for a circular hull around a single point.\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.ellipse(polyPoints[0][0], polyPoints[0][1], this.hullPadding, this.hullPadding, Math.PI / 4, 0, 2 * Math.PI);\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n/*\r\n    console.log(\r\n      \"M \" +\r\n        p1 +\r\n        \" A \" +\r\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p2].join(\",\") +\r\n        \" A \" +\r\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p1].join(\",\")\r\n    );\r\n    */\r\n  }\r\n\r\n  private smoothHull2(polyPoints: Array<[number, number]>) {\r\n    // Returns the path for a rounded hull around two points.\r\n\r\n    var v = vecFrom(polyPoints[0], polyPoints[1]);\r\n    var extensionVec = vecScaleTo(v, this.hullPadding);\r\n\r\n    var extension0 = vecSum(polyPoints[0], vecScale(extensionVec, -1));\r\n    var extension1 = vecSum(polyPoints[1], extensionVec);\r\n\r\n    var tangentHalfLength = 1.2 * this.hullPadding;\r\n    var controlDelta = vecScaleTo(unitNormal(v, undefined), tangentHalfLength);\r\n    var invControlDelta = vecScale(controlDelta, -1);\r\n\r\n    var control0 = vecSum(extension0, invControlDelta);\r\n    var control1 = vecSum(extension1, invControlDelta);\r\n    var control3 = vecSum(extension0, controlDelta);\r\n    var control4 = vecSum(extension1, controlDelta);\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(extension0[0], extension0[1]);\r\n    this.ctx.bezierCurveTo(control0[0], control0[1], control1[0], control1[1], extension1[0], extension1[1])\r\n    this.ctx.bezierCurveTo(control4[0], control4[1], control3[0], control3[1], extension0[0], extension0[1])\r\n\r\n    this.ctx.closePath();\r\n    this.ctx.fill();\r\n  }\r\n\r\n  private calc(allCollection: CollectionReturnValue) {\r\n    this.layer.resetTransform(this.ctx);\r\n    this.layer.clear(this.ctx);\r\n    this.layer.setTransform(this.ctx);\r\n    this.ctx.fillStyle = this.color + this.alpha;\r\n\r\n    let a;\r\n    if (allCollection.length > 2) {\r\n      a = this.smoothHull(this.convexHullPoints(allCollection));\r\n      // a.push(a[a.length - 1]);\r\n      this.ctx.save();\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(a[0].p[0], a[0].p[1]);\r\n      \r\n      const x:Array<number> = []\r\n\r\n      a.forEach(element => {\r\n        x.push(element.p[0])\r\n        x.push(element.p[1])\r\n      });\r\n      this.ctx.curve(x, 0.5, 25, true);                 // add cardinal spline to path\r\n      // this.ctx.stroke();                      // stroke path\r\n      \r\n      /*\r\n      for (let i = 0; i < a.length; i++) {\r\n        let element = a[i];\r\n\r\n        let x1 = element.p[0];\r\n        let y1 = element.p[1];\r\n\r\n        let x1v = element.v[0];\r\n        let y1v = element.v[1];\r\n\r\n\r\n        if (i === 0) {\r\n          continue\r\n        }\r\n\r\n        // const xc = (x + l * res[0] + points[i +  1].x) / 2;\r\n        // const yc = (points[i].y + points[i + 1].y) / 2;\r\n        // this.ctx.quadraticCurveTo(x + l * res[0], y + l * res[1], xc, yc);\r\n\r\n        // this.ctx.font = \"24px Helvetica\";\r\n        // this.ctx.fillStyle = \"\";\r\n        // this.ctx.fillText(\r\n        //   `${this.hull[i].data(\"hullX\")} ${this.hull[i].data(\"hullY\")}`,\r\n        //   this.hull[i].data(\"hullX\"),\r\n        //   this.hull[i].data(\"hullY\")\r\n        //   );\r\n        console.log(i, element);\r\n        \r\n       //this.ctx.quadraticCurveTo(x1, y1 , x1, y1);\r\n      //this.ctx.lineTo(x1, y1);\r\n      }\r\n      */\r\n      this.ctx.closePath();\r\n      this.ctx.fill();\r\n    } else {\r\n      a = this.smoothHull(this.collectionPoints(allCollection));\r\n    }\r\n  }\r\n\r\n  private innerZone(node: Node) {\r\n    this.innerZoneNodes.push(node);\r\n    node.OwInDep.forEach((node) => {\r\n      if (!this.innerZoneNodes.includes(node)) {\r\n        this.innerZone(node);\r\n      }\r\n    });\r\n    node.TwDep.forEach((node) => {\r\n      if (!this.innerZoneNodes.includes(node)) {\r\n        this.innerZone(node);\r\n      }\r\n    });\r\n  }\r\n\r\n  private outerZone(nodes: Node[]) {\r\n    nodes.forEach((node) => {\r\n      node.OwDep.forEach((node) => {\r\n        if (\r\n          !this.innerZoneNodes.includes(node) &&\r\n          !this.outerZoneNodes[0].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[0].push(node);\r\n        }\r\n      });\r\n      node.TwDep.forEach((node) => {\r\n        if (\r\n          !this.innerZoneNodes.includes(node) &&\r\n          !this.outerZoneNodes[0].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[0].push(node);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.outerZoneNodes[0].forEach((node) => {\r\n      node.OwDep.forEach((owdep) => {\r\n        if (\r\n          this.outerZoneNodes[0].includes(owdep) &&\r\n          !this.outerZoneNodes[1].includes(node)\r\n        ) {\r\n          this.outerZoneNodes[1].push(node);\r\n          this.outerZoneNodes[0] = this.outerZoneNodes[0].filter(\r\n            (obj) => obj.Id !== node.Id\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\ZoneStore.ts",["101"],"import { makeAutoObservable } from \"mobx\";\r\nimport Zone from \"../objects/Zone\";\r\nimport { networkStore, settingsStore, zoneStore } from \"..\";\r\nimport { cy } from \"../Graph\";\r\nimport { Collection } from \"cytoscape\";\r\n\r\nexport class ZoneStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  private zones: Zone[] = [];\r\n\r\n  get Zones(): Zone[] {\r\n    return this.zones;\r\n  }\r\n\r\n  /**\r\n   * AddZone\r\n   */\r\n  public AddZone(zone: Zone) {\r\n    if (this.zones.filter((z) => z.Ego.Id === zone.Ego.Id).length === 0) {\r\n      this.zones.push(zone);\r\n    }\r\n    zone.AllCollection.removeClass(\"hide\");\r\n    this.Duplicates();\r\n    this.ColorNodesInZones();\r\n  }\r\n\r\n  /**\r\n   * ClearZones\r\n   */\r\n  public ClearZones() {\r\n    this.zones.forEach((z) => {\r\n      z.clearPath();\r\n    });\r\n\r\n    // cy.nodes().forEach((n) => {\r\n    //   n.classes(\r\n    //     networkStore.Network?.Nodes.filter(\r\n    //       (node) =>\r\n    //         node.Id ===\r\n    //         ((n as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number)\r\n    //     )[0].classes\r\n    //   );\r\n    // });\r\n\r\n    this.zones = [];\r\n    this.ColorNodesInZones();\r\n  }\r\n\r\n  /**\r\n   * RemoveZone\r\n   */\r\n  public RemoveZone(z: Zone) {\r\n    this.zones = this.zones.filter((zone) => zone.Ego.Id !== z.Ego.Id);\r\n    z.clearPath();\r\n    this.Duplicates();\r\n    this.ColorNodesInZones();\r\n  }\r\n\r\n  /**\r\n   * Duplicates\r\n   */\r\n  public Duplicates() {\r\n    this.zones.forEach((zone) => {\r\n      zone.drawZone();\r\n    });\r\n\r\n    if (settingsStore.Duplicates === \"de\") {\r\n      for (let i = 0; i < this.zones.length; i++) {\r\n        const z1: Zone = this.zones[i];\r\n\r\n        for (let j = i + 1; j < this.zones.length; j++) {\r\n          const z2: Zone = this.zones[j];\r\n\r\n          if (\r\n            z1.InsideCollection.union(z1.OutsideCollection).difference(\r\n              z2.InsideCollection.union(z2.OutsideCollection)\r\n            ).length === 0 &&\r\n            z2.InsideCollection.union(z2.OutsideCollection).difference(\r\n              z1.InsideCollection.union(z1.OutsideCollection)\r\n            ).length === 0\r\n          ) {\r\n            z2.clearPath();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (settingsStore.Duplicates === \"me\") {\r\n      for (let i = 0; i < this.zones.length; i++) {\r\n        const z1: Zone = this.zones[i];\r\n        for (let j = i + 1; j < this.zones.length; j++) {\r\n          const z2: Zone = this.zones[j];\r\n\r\n          if (\r\n            z1.Ego.TwDep.filter((n) => n.Id === z2.Ego.Id).length === 1 &&\r\n            z1.InsideCollection.subtract(z2.InsideCollection).length === 0 &&\r\n            z2.InsideCollection.subtract(z1.InsideCollection).length === 0\r\n          ) {\r\n            z2.clearPath();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * NodesInZones\r\n   */\r\n  public NodesInZones(): cytoscape.Collection {\r\n    let nodesInZones = cy.collection();\r\n    this.zones.forEach((zone) => {\r\n      nodesInZones = nodesInZones.union(\r\n        zone.InsideCollection.union(zone.OutsideCollection)\r\n      );\r\n    });\r\n    return nodesInZones;\r\n  }\r\n\r\n  /**\r\n   * EdgeColors\r\n   */\r\n  private EdgeColors(z: Zone, hover: boolean = false) {\r\n    if (!hover) {\r\n      let nodes: cytoscape.Collection = cy.collection();\r\n\r\n      this.zones.forEach((z) => {\r\n        if (z.isDrawn)\r\n        nodes = nodes.union(z.InsideCollection.union(z.OutsideCollection));\r\n      });\r\n\r\n      nodes.forEach((x, i) => {\r\n        nodes.forEach((y, j) => {\r\n          networkStore.Network?.getEdge(\r\n            (x as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number,\r\n            (y as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number\r\n          ).forEach((e) => {\r\n            const source = (networkStore.Network?.getNode(\r\n              (e as { [key: string]: any })[\"_private\"][\"data\"][\r\n                \"source\"\r\n              ] as number\r\n            ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\r\n              \"data\"\r\n            ][\"nodeType\"];\r\n\r\n            const target = (networkStore.Network?.getNode(\r\n              (e as { [key: string]: any })[\"_private\"][\"data\"][\r\n                \"target\"\r\n              ] as number\r\n            ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\r\n              \"data\"\r\n            ][\"nodeType\"];\r\n\r\n            if (\r\n              source === \"stronglyProminent\" &&\r\n              target === \"stronglyProminent\"\r\n            ) {\r\n              e.classes(\"sptosp\");\r\n              return;\r\n            }\r\n\r\n            if (source === \"weaklyProminent\" && target === \"weaklyProminent\") {\r\n              e.classes(\"wptowp\");\r\n              return;\r\n            }\r\n\r\n            if (source === \"nonProminent\" && target === \"nonProminent\") {\r\n              e.classes(\"nptonp\");\r\n              return;\r\n            }\r\n\r\n            if (\r\n              (source === \"stronglyProminent\" &&\r\n                target === \"weaklyProminent\") ||\r\n              (source === \"weaklyProminent\" && target === \"stronglyProminent\")\r\n            ) {\r\n              e.classes(\"sptowp\");\r\n              return;\r\n            }\r\n\r\n            if (\r\n              (source === \"stronglyProminent\" && target === \"nonProminent\") ||\r\n              (source === \"nonProminent\" && target === \"stronglyProminent\")\r\n            ) {\r\n              e.classes(\"sptonp\");\r\n              return;\r\n            }\r\n\r\n            if (\r\n              (source === \"weaklyProminent\" && target === \"nonProminent\") ||\r\n              (source === \"nonProminent\" && target === \"weaklyProminent\")\r\n            ) {\r\n              e.classes(\"wptonp\");\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      });\r\n    } else {\r\n      z.AllCollection.forEach((x, i) => {\r\n        z.AllCollection.forEach((y, j) => {\r\n          networkStore.Network?.getEdge(\r\n            (x as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number,\r\n            (y as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number\r\n          ).forEach((e) => {\r\n            const source = (networkStore.Network?.getNode(\r\n              (e as { [key: string]: any })[\"_private\"][\"data\"][\r\n                \"source\"\r\n              ] as number\r\n            ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\r\n              \"data\"\r\n            ][\"nodeType\"];\r\n\r\n            const target = (networkStore.Network?.getNode(\r\n              (e as { [key: string]: any })[\"_private\"][\"data\"][\r\n                \"target\"\r\n              ] as number\r\n            ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\r\n              \"data\"\r\n            ][\"nodeType\"];\r\n\r\n            if (\r\n              source === \"stronglyProminent\" &&\r\n              target === \"stronglyProminent\"\r\n            ) {\r\n              e.classes(\"sptosp\");\r\n            }\r\n\r\n            if (source === \"weaklyProminent\" && target === \"weaklyProminent\") {\r\n              e.classes(\"wptowp\");\r\n            }\r\n\r\n            if (source === \"nonProminent\" && target === \"nonProminent\") {\r\n              e.classes(\"nptonp\");\r\n            }\r\n\r\n            if (\r\n              (source === \"stronglyProminent\" &&\r\n                target === \"weaklyProminent\") ||\r\n              (source === \"weaklyProminent\" && target === \"stronglyProminent\")\r\n            ) {\r\n              e.classes(\"sptowp\");\r\n            }\r\n\r\n            if (\r\n              (source === \"stronglyProminent\" && target === \"nonProminent\") ||\r\n              (source === \"nonProminent\" && target === \"stronglyProminent\")\r\n            ) {\r\n              e.classes(\"sptonp\");\r\n            }\r\n\r\n            if (\r\n              (source === \"weaklyProminent\" && target === \"nonProminent\") ||\r\n              (source === \"nonProminent\" && target === \"weaklyProminent\")\r\n            ) {\r\n              e.classes(\"wptonp\");\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ColorNodesInZones\r\n   */\r\n  public ColorNodesInZones() {\r\n    cy.nodes().not(\".hide\").classes(\"\");\r\n    cy.edges().not(\".hide\").classes(\"\");\r\n\r\n    if (this.zones.length === 0) {\r\n      this.ColorAllNodes();\r\n      this.ColorAllEdges();\r\n    } else {\r\n      zoneStore.Zones.forEach(element => {\r\n        if (element.IsDrawn) {\r\n          element.AllCollection.not(\".hide\")?.forEach((n) => {\r\n            n.classes(\r\n              networkStore.Network?.Nodes.filter(\r\n                (node) =>\r\n                  node.Id ===\r\n                  ((n as { [key: string]: any })[\"_private\"][\"data\"][\r\n                    \"id\"\r\n                  ] as number)\r\n              )[0].classes)\r\n              })\r\n        }\r\n      });\r\n      this.zones.forEach((z) => {\r\n        this.EdgeColors(z);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ColorAllNodes\r\n   */\r\n  private ColorAllNodes() {\r\n    cy.nodes().not(\".hide\").classes(\"\");\r\n    cy.nodes().forEach((n) => {\r\n      n.classes(\r\n        networkStore.Network?.Nodes.filter(\r\n          (node) =>\r\n            node.Id ===\r\n            ((n as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number)\r\n        )[0].classes // (n as { [key: string]: any })[\"_private\"][\"data\"][\"id\"] as number;\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ColorAllEdges\r\n   */\r\n  private ColorAllEdges() {\r\n    cy.edges().forEach((e) => {\r\n      const source = (networkStore.Network?.getNode(\r\n        (e as { [key: string]: any })[\"_private\"][\"data\"][\"source\"] as number\r\n      ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\"data\"][\r\n        \"nodeType\"\r\n      ];\r\n\r\n      const target = (networkStore.Network?.getNode(\r\n        (e as { [key: string]: any })[\"_private\"][\"data\"][\"target\"] as number\r\n      ) as { [key: string]: any })[\"_private\"][\"eles\"][0][\"_private\"][\"data\"][\r\n        \"nodeType\"\r\n      ];\r\n\r\n      if (source === \"stronglyProminent\" && target === \"stronglyProminent\") {\r\n        e.classes(\"sptosp\");\r\n      }\r\n\r\n      if (source === \"weaklyProminent\" && target === \"weaklyProminent\") {\r\n        e.classes(\"wptowp\");\r\n      }\r\n\r\n      if (source === \"nonProminent\" && target === \"nonProminent\") {\r\n        e.classes(\"nptonp\");\r\n      }\r\n\r\n      if (\r\n        (source === \"stronglyProminent\" && target === \"weaklyProminent\") ||\r\n        (source === \"weaklyProminent\" && target === \"stronglyProminent\")\r\n      ) {\r\n        e.classes(\"sptowp\");\r\n      }\r\n\r\n      if (\r\n        (source === \"stronglyProminent\" && target === \"nonProminent\") ||\r\n        (source === \"nonProminent\" && target === \"stronglyProminent\")\r\n      ) {\r\n        e.classes(\"sptonp\");\r\n      }\r\n\r\n      if (\r\n        (source === \"weaklyProminent\" && target === \"nonProminent\") ||\r\n        (source === \"nonProminent\" && target === \"weaklyProminent\")\r\n      ) {\r\n        e.classes(\"wptonp\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ColorNodesInZone\r\n   */\r\n  public ColorNodesInZone(z: Zone) {\r\n    cy.nodes().not(\".hide\").classes(\"\");\r\n    cy.edges().not(\".hide\").classes(\"\");\r\n\r\n    z.InsideCollection.not(\".hide\").forEach((n) => {\r\n      n.classes(\"weaklyProminent\");\r\n    });\r\n\r\n    z.InsideCollection[0].addClass(\"stronglyProminent\");\r\n\r\n    if (networkStore.Network) {\r\n      z.outerZoneNodes[0].forEach((n) => {\r\n        networkStore.Network?.getNode(n.Id).not(\".hide\").classes(\"liaisons\");\r\n      });\r\n\r\n      z.outerZoneNodes[1].forEach((n) => {\r\n        networkStore.Network?.getNode(n.Id).not(\".hide\").classes(\"coliaisons\");\r\n      });\r\n      this.EdgeColors(z, true);\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\SettingsStore.ts",["102"],"import { Collection } from \"cytoscape\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { networkStore, zoneStore } from \"..\";\r\nimport { cy } from \"../Graph\";\r\n\r\nexport class SettingsStore {\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n  private automove: boolean = false;\r\n  private hideOutsideZones: boolean = true;\r\n\r\n  private zIndex: number = -1;\r\n\r\n  private minNodesZoneShow: number = 1;\r\n\r\n  private selectedOption: string = \"basicZones\";\r\n\r\n  public get Automove(): boolean {\r\n    return this.automove;\r\n  }\r\n\r\n  public set Automove(v: boolean) {\r\n    this.automove = v;\r\n\r\n    zoneStore.Zones.forEach((z) => {\r\n      z.EnableAutomove = v;\r\n    });\r\n  }\r\n\r\n  public get SelectedOption(): string {\r\n    return this.selectedOption;\r\n  }\r\n\r\n  public set SelectedOption(v: string) {\r\n    this.selectedOption = v;\r\n  }\r\n\r\n  public get HideOutsideZones(): boolean {\r\n    return this.hideOutsideZones;\r\n  }\r\n\r\n  public set HideOutsideZones(v: boolean) {\r\n    this.hideOutsideZones = v;\r\n    if (this.hideOutsideZones) {\r\n      let nodesInZones: Collection = cy.collection();\r\n\r\n      zoneStore.Zones.forEach((zone) => {\r\n        nodesInZones = nodesInZones.union(zone.AllCollection);\r\n      });\r\n\r\n      const nodesOutside = cy.nodes().difference(nodesInZones);\r\n\r\n      nodesOutside.addClass(\"hide\");\r\n    } else {\r\n      cy.nodes().removeClass(\"hide\");\r\n    }\r\n  }\r\n\r\n  public get ZIndex(): number {\r\n    return this.zIndex;\r\n  }\r\n\r\n  public set ZIndex(v: number) {\r\n    this.zIndex = v;\r\n  }\r\n\r\n  public get MinNodesZoneShow(): number {\r\n    return this.minNodesZoneShow;\r\n  }\r\n\r\n  public set MinNodesZoneShow(v: number) {\r\n    this.minNodesZoneShow = v;\r\n\r\n    zoneStore.Zones.forEach((element) => {\r\n      if (element.AllCollection.length <= this.minNodesZoneShow) {\r\n        element.drawZone();\r\n      } else {\r\n        element.clearPath();\r\n      }\r\n      zoneStore.ColorNodesInZones();;\r\n      \r\n    });\r\n  }\r\n\r\n  private duplicates: string = \"all\";\r\n\r\n  public get Duplicates(): string {\r\n    return this.duplicates;\r\n  }\r\n\r\n  public set Duplicates(v: string) {\r\n    this.duplicates = v;\r\n    zoneStore.Duplicates();\r\n  }\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\stores\\NetworkStore.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\Graph.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\ZoneItem.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\LeftPanel.tsx",["103","104","105","106","107","108","109","110","111"],"import {\r\n  Button,\r\n  Heading,\r\n  ListItem,\r\n  Stack,\r\n  UnorderedList,\r\n} from \"@chakra-ui/react\";\r\nimport react, { useState, useRef, useEffect, createRef } from \"react\";\r\nimport { Flex, Spacer, Box } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { settingsStore } from \".\";\r\n\r\nexport const LeftPanel: React.FunctionComponent = () => {\r\n  const [activeOption, setActiveOption] = useState();\r\n\r\n  useEffect(() => {\r\n    console.log(activeOption);\r\n  }, [activeOption]);\r\n\r\n  return (\r\n    <Stack p={5} w={\"10em\"}>\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Basic\r\n      </Heading>\r\n      <Button\r\n        isActive={true}\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={(e) => {\r\n          settingsStore.SelectedOption = \"basicZones\";\r\n        }}\r\n      >\r\n        Zones\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicNodes\";\r\n        }}\r\n      >\r\n        Nodes\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicEdges\";\r\n        }}\r\n      >\r\n        Edges\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"basicLayout\";\r\n        }}\r\n      >\r\n        Layout\r\n      </Button>\r\n\r\n      <Heading as=\"h5\" size=\"sm\">\r\n        Zones\r\n      </Heading>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesMax\";\r\n        }}\r\n      >\r\n        Max\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesMin\";\r\n        }}\r\n      >\r\n        Min\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesSubzone\";\r\n        }}\r\n      >\r\n        Subzone\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesSuperzone\";\r\n        }}\r\n      >\r\n        Superzone\r\n      </Button>\r\n      <Button\r\n        isFullWidth={true}\r\n        colorScheme=\"teal\"\r\n        variant=\"ghost\"\r\n        onClick={() => {\r\n          settingsStore.SelectedOption = \"zonesIntersect\";\r\n        }}\r\n      >\r\n        Intersect\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\RightPanel.tsx",["112","113","114","115","116","117","118"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicZones.tsx",["119","120"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicEdges.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicNodes.tsx",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesIntersect.tsx",["121","122","123","124"],"import { Button, Select, Stack, Text } from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { zoneStore } from \"../..\";\r\n\r\nexport function ZonesIntersect() {\r\n  const [z, setZ] = useState([]);\r\n  return (\r\n    <Stack>\r\n      <Select placeholder=\"None\" onChange={(e) => {}}>\r\n        {zoneStore.Zones.map((z, i) => {\r\n          return <option value={i}>{z.Ego.Id}</option>;\r\n        })}\r\n      </Select>\r\n    </Stack>\r\n  );\r\n}\r\n","C:\\Users\\Lukas\\Desktop\\ego\\src\\objects\\Vector.ts",[],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\basic\\BasicLayout.tsx",["125","126"],"C:\\Users\\Lukas\\Desktop\\ego\\src\\settings\\zones\\ZonesMax.tsx",["127","128","129","130","131"],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":11,"column":10,"nodeType":"138","messageId":"139","endLine":11,"endColumn":18},{"ruleId":"136","severity":1,"message":"140","line":5,"column":3,"nodeType":"138","messageId":"139","endLine":5,"endColumn":19},{"ruleId":"136","severity":1,"message":"141","line":5,"column":10,"nodeType":"138","messageId":"139","endLine":5,"endColumn":20},{"ruleId":"136","severity":1,"message":"142","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":22},{"ruleId":"136","severity":1,"message":"143","line":4,"column":3,"nodeType":"138","messageId":"139","endLine":4,"endColumn":11},{"ruleId":"136","severity":1,"message":"144","line":6,"column":3,"nodeType":"138","messageId":"139","endLine":6,"endColumn":16},{"ruleId":"136","severity":1,"message":"145","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":13},{"ruleId":"136","severity":1,"message":"146","line":8,"column":27,"nodeType":"138","messageId":"139","endLine":8,"endColumn":33},{"ruleId":"136","severity":1,"message":"147","line":8,"column":46,"nodeType":"138","messageId":"139","endLine":8,"endColumn":55},{"ruleId":"136","severity":1,"message":"148","line":9,"column":10,"nodeType":"138","messageId":"139","endLine":9,"endColumn":14},{"ruleId":"136","severity":1,"message":"149","line":9,"column":16,"nodeType":"138","messageId":"139","endLine":9,"endColumn":22},{"ruleId":"136","severity":1,"message":"150","line":9,"column":24,"nodeType":"138","messageId":"139","endLine":9,"endColumn":27},{"ruleId":"136","severity":1,"message":"151","line":14,"column":24,"nodeType":"138","messageId":"139","endLine":14,"endColumn":39},{"ruleId":"136","severity":1,"message":"145","line":2,"column":8,"nodeType":"138","messageId":"139","endLine":2,"endColumn":13},{"ruleId":"136","severity":1,"message":"152","line":2,"column":17,"nodeType":"138","messageId":"139","endLine":2,"endColumn":27},{"ruleId":"136","severity":1,"message":"148","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":14},{"ruleId":"136","severity":1,"message":"149","line":3,"column":16,"nodeType":"138","messageId":"139","endLine":3,"endColumn":22},{"ruleId":"136","severity":1,"message":"153","line":5,"column":10,"nodeType":"138","messageId":"139","endLine":5,"endColumn":17},{"ruleId":"136","severity":1,"message":"154","line":5,"column":34,"nodeType":"138","messageId":"139","endLine":5,"endColumn":43},{"ruleId":"136","severity":1,"message":"137","line":6,"column":10,"nodeType":"138","messageId":"139","endLine":6,"endColumn":18},{"ruleId":"136","severity":1,"message":"149","line":8,"column":3,"nodeType":"138","messageId":"139","endLine":8,"endColumn":9},{"ruleId":"136","severity":1,"message":"155","line":22,"column":9,"nodeType":"138","messageId":"139","endLine":22,"endColumn":16},{"ruleId":"136","severity":1,"message":"156","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":16},{"ruleId":"136","severity":1,"message":"157","line":1,"column":33,"nodeType":"138","messageId":"139","endLine":1,"endColumn":37},{"ruleId":"136","severity":1,"message":"158","line":6,"column":10,"nodeType":"138","messageId":"139","endLine":6,"endColumn":11},{"ruleId":"136","severity":1,"message":"159","line":6,"column":13,"nodeType":"138","messageId":"139","endLine":6,"endColumn":17},{"ruleId":"136","severity":1,"message":"160","line":1,"column":18,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"149","line":1,"column":44,"nodeType":"138","messageId":"139","endLine":1,"endColumn":50},{"ruleId":"136","severity":1,"message":"156","line":1,"column":10,"nodeType":"138","messageId":"139","endLine":1,"endColumn":16},{"ruleId":"136","severity":1,"message":"161","line":1,"column":27,"nodeType":"138","messageId":"139","endLine":1,"endColumn":33},{"ruleId":"136","severity":1,"message":"157","line":1,"column":42,"nodeType":"138","messageId":"139","endLine":1,"endColumn":46},{"ruleId":"136","severity":1,"message":"162","line":2,"column":19,"nodeType":"138","messageId":"139","endLine":2,"endColumn":26},{"ruleId":"136","severity":1,"message":"163","line":4,"column":28,"nodeType":"138","messageId":"139","endLine":4,"endColumn":36},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'ZoneItem' is defined but never used.","Identifier","unusedVar","'CytoscapeOptions' is defined but never used.","'Collection' is defined but never used.","'networkStore' is defined but never used.","'ListItem' is defined but never used.","'UnorderedList' is defined but never used.","'react' is defined but never used.","'useRef' is defined but never used.","'createRef' is defined but never used.","'Flex' is defined but never used.","'Spacer' is defined but never used.","'Box' is defined but never used.","'setActiveOption' is assigned a value but never used.","'useContext' is defined but never used.","'Context' is defined but never used.","'zoneStore' is defined but never used.","'context' is assigned a value but never used.","'Button' is defined but never used.","'Text' is defined but never used.","'z' is assigned a value but never used.","'setZ' is assigned a value but never used.","'Divider' is defined but never used.","'Select' is defined but never used.","'observe' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]